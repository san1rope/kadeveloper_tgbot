import logging
from typing import Union

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession

from config import Config
from tg_bot.db_models.quick_commands import DbUser
from tg_bot.handlers.start import cmd_start
from tg_bot.keyboards.inline import InlineMarkups as Im
from tg_bot.misc.api_interface import APIInterface
from tg_bot.misc.models import APIUser
from tg_bot.misc.states import CreateOrder
from tg_bot.misc.utils import Utils as Ut

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "order_feedbacks")
async def choose_period(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    logger.info(f"Handler called. {choose_period.__name__}. user_id={uid}")

    text = [
        "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∫—Ä—É—Ç–∫–∏:</b>",
        "\n<b>‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>"
    ]
    markup = await Im.order_period()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.ChoosePeriod)


@router.callback_query(CreateOrder.ChoosePeriod)
@router.message(CreateOrder.ChoosePeriod)
async def choose_pf_quantity(message: [types.CallbackQuery, types.Message], state: FSMContext,
                             from_back_btn: bool = False):
    uid = message.from_user.id
    logger.info(f"Handler called. {choose_pf_quantity.__name__}. user_id={uid}")

    data = await state.get_data()

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "cancel":
            return await cmd_start(message=message)

        elif cd == "write_quantity":
            text = [
                "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
                "<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π</b>"
            ]
            markup = await Im.back(callback_data="back_from_input")

            return await Ut.send_step_message(user_id=uid, text='\n'.join(text), markup=markup)

        elif cd == "back_from_input" and not from_back_btn:
            return await choose_period(callback=message, state=state)

        else:
            if not from_back_btn:
                selected_period = int(cd)
                await state.update_data(period=selected_period)

            else:
                selected_period = data.get("period")

    elif isinstance(message, types.Message):
        input_text = message.text.strip()
        if not input_text.isdigit():
            text = "<b>üî¥ –í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!</b>"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        input_text = int(input_text)
        if input_text <= 0:
            text = "<b>üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!</b>"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        selected_period = input_text
        await state.update_data(period=selected_period)

    else:
        return

    text = [
        "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–Ω–µ–π: {selected_period}</b>\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ / –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –¥–µ–Ω—å</b>",
        "\n<b>üöÄ 50 –ü–§ - —á–∞—Å—Ç—ã–π –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!</b>",
        "<b>üí¥ –¶–µ–Ω–∞ 4 —Ä—É–±–ª—è –∑–∞ 1 –ü–§</b>"
        "\n<b>‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>"
    ]
    markup = await Im.order_pf()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.ChoosePFQuantity)


@router.callback_query(CreateOrder.ChoosePFQuantity)
@router.message(CreateOrder.ChoosePFQuantity)
async def write_advert_url(message: Union[types.CallbackQuery, types.Message], state: FSMContext,
                           from_back_btn: bool = False):
    uid = message.from_user.id
    logger.info(f"Handler called. {write_advert_url.__name__}. user_id={uid}")

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "back" and not from_back_btn:
            return await choose_period(callback=message, state=state)

        elif cd == "write_quantity":
            text = [
                "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
                "<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§</b>"
            ]
            markup = await Im.back(callback_data="back_from_input")

            return await Ut.send_step_message(user_id=uid, text='\n'.join(text), markup=markup)

        elif cd == "back_from_input":
            return await choose_pf_quantity(message=message, state=state, from_back_btn=True)

        else:
            if not from_back_btn:
                selected_pf = int(cd)
                await state.update_data(pf=selected_pf)

            else:
                data = await state.get_data()
                selected_pf = data.get("pf")

    elif isinstance(message, types.Message):
        input_text = message.text.strip()
        if not input_text.isdigit():
            text = "<b>üî¥ –í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!</b>"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        input_text = int(input_text)
        if input_text <= 0:
            text = "<b>üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!</b>"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        selected_pf = input_text
        await state.update_data(pf=selected_pf)

    else:
        return

    text = [
        "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§: {selected_pf}</b>\n",
        "<b>‚úçÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Ctrl + Enter)</b>"
    ]
    markup = await Im.back(callback_data="back")
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.InsertAdvertsUrls)


@router.message(CreateOrder.InsertAdvertsUrls)
@router.callback_query(CreateOrder.InsertAdvertsUrls)
async def make_payment(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    uid = message.from_user.id
    logger.info(f"Handler called. {make_payment.__name__}. user_id={uid}")

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "back":
            return await choose_pf_quantity(message=message, state=state, from_back_btn=True)

        else:
            return

    elif isinstance(message, types.Message):
        input_text = message.text.strip()
        if not input_text.startswith("https://"):
            text = "<b>üî¥ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n–ß—Ç–æ-–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å 2 –∏ –±–æ–ª—å—à–µ —Å—Å—ã–ª–æ–∫, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Ctrl + Enter)</b>"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        adverts_urls = input_text.split("\n")
        adverts_urls = [i.split() for i in adverts_urls]
        await state.update_data(adverts_urls=adverts_urls)

    else:
        return

    text_urls = ""
    for i in adverts_urls:
        text_urls += f"\n{i}"

    data = await state.get_data()
    price = data["pf"] * 4

    text = [
        "<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n",
        f"<b>–í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Å—Å—ã–ª–∫–∏:{text_urls}</b>\n",
        "<b>üí¥ –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É!</b>"
        f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–¥–∞—á–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±–ª–µ–π</b>",
        f"<b>‚¨áÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>"
    ]
    markup = await Im.payment()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.MakePayment)


@router.callback_query(CreateOrder.MakePayment)
async def create_process_has_completed(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    logger.info(f"Handler called. {create_process_has_completed.__name__}. user_id={uid}")

    cd = callback.data
    if cd == "back":
        return await write_advert_url(message=callback, state=state, from_back_btn=True)

    elif cd == "payment_completed":
        data = await state.get_data()
        period = data["period"]
        pf = data["pf"]
        adverts_urls = data["adverts_urls"]

        db_user = await DbUser(tg_user_id=uid).select()
        if not db_user:
            db_user = await DbUser(tg_user_id=uid, balance=0).add()

            api_user = APIUser(telegram=callback.from_user.username, balance=0)
            result = await APIInterface.add_new_user(api_user=api_user)
            if result["success"] is False:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ API!")

        text = [
            "<b>‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n",
            "<b>‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.</b>\n",
            "<b>‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –±—É–¥—É—Ç –Ω–∞—á–∞—Ç—ã –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</b>",
            "\n<b>‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>"
        ]
        markup = await Im.order_created()
        await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)
