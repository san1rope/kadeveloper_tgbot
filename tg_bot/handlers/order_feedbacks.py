import json
import logging
from gc import callbacks
from typing import Union

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from tg_bot.db_models.quick_commands import DbPayment
from tg_bot.handlers.start import cmd_start
from tg_bot.keyboards.inline import InlineMarkups as Im
from tg_bot.misc.states import CreateOrder
from tg_bot.misc.utils import Utils as Ut

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "continue_create_order")
@router.callback_query(F.data == "order_feedbacks")
async def choose_period(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    logger.info(f"Handler called. {choose_period.__name__}. user_id={uid}")

    text = [
        "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∫—Ä—É—Ç–∫–∏:",
        "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
    ]
    markup = await Im.order_period()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.ChoosePeriod)


@router.callback_query(CreateOrder.ChoosePeriod)
@router.message(CreateOrder.ChoosePeriod)
async def choose_pf_quantity(message: [types.CallbackQuery, types.Message], state: FSMContext,
                             from_back_btn: bool = False):
    uid = message.from_user.id
    logger.info(f"Handler called. {choose_pf_quantity.__name__}. user_id={uid}")

    data = await state.get_data()

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "cancel":
            await state.clear()
            return await cmd_start(message=message)

        elif cd == "write_quantity":
            text = [
                "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"
            ]
            markup = await Im.back(callback_data="back_from_input")

            return await Ut.send_step_message(user_id=uid, text='\n'.join(text), markup=markup)

        elif cd == "back_from_input" and not from_back_btn:
            return await choose_period(callback=message, state=state)

        else:
            if not from_back_btn:
                selected_period = int(cd)
                await state.update_data(period=selected_period)

            else:
                selected_period = data.get("period")

    elif isinstance(message, types.Message):
        input_text = message.text.strip()
        if not input_text.isdigit():
            text = "üî¥ –í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        input_text = int(input_text)
        if input_text <= 0:
            text = "üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        if input_text > 90:
            text = "üî¥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 90"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        selected_period = input_text
        await state.update_data(period=selected_period)

    else:
        return

    text = [
        "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–Ω–µ–π: {selected_period}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ / –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –¥–µ–Ω—å",
        "\nüöÄ 50 –ü–§ - —á–∞—Å—Ç—ã–π –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!",
        "üí¥ –¶–µ–Ω–∞ 4 —Ä—É–±–ª—è –∑–∞ 1 –ü–§"
        "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
    ]
    markup = await Im.order_pf()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.ChoosePFQuantity)


@router.callback_query(CreateOrder.ChoosePFQuantity)
@router.message(CreateOrder.ChoosePFQuantity)
async def write_advert_url(message: Union[types.CallbackQuery, types.Message], state: FSMContext,
                           from_back_btn: bool = False):
    uid = message.from_user.id
    logger.info(f"Handler called. {write_advert_url.__name__}. user_id={uid}")

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "back" and not from_back_btn:
            return await choose_period(callback=message, state=state)

        elif cd == "write_quantity":
            text = [
                "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§"
            ]
            markup = await Im.back(callback_data="back_from_input")

            return await Ut.send_step_message(user_id=uid, text='\n'.join(text), markup=markup)

        elif cd == "back_from_input":
            return await choose_pf_quantity(message=message, state=state, from_back_btn=True)

        else:
            if not from_back_btn:
                selected_pf = int(cd)
                await state.update_data(pf=selected_pf)

            else:
                data = await state.get_data()
                selected_pf = data.get("pf")

    elif isinstance(message, types.Message):
        input_text = message.text.strip()
        if not input_text.isdigit():
            text = "üî¥ –í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        input_text = int(input_text)
        if input_text <= 0:
            text = "üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!"
            msg = await message.answer(text=text)
            return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

        selected_pf = input_text
        await state.update_data(pf=selected_pf)

    else:
        return

    text = [
        "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§: {selected_pf}\n",
        "‚úçÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Ctrl + Enter)"
    ]
    markup = await Im.back(callback_data="back")
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.set_state(CreateOrder.InsertAdvertsUrls)


@router.message(CreateOrder.InsertAdvertsUrls)
@router.callback_query(CreateOrder.InsertAdvertsUrls)
async def make_payment(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    uid = message.from_user.id
    logger.info(f"Handler called. {make_payment.__name__}. user_id={uid}")

    if isinstance(message, types.CallbackQuery):
        await message.answer()
        cd = message.data

        if cd == "back":
            return await choose_pf_quantity(message=message, state=state, from_back_btn=True)

        else:
            return

    elif isinstance(message, types.Message):
        input_text = message.text.strip()

        adverts_urls = []
        wrong_urls = []
        for input_url in input_text.split("\n"):
            input_url = input_url.strip()

            urls_list = input_url.split(" ")
            if len(urls_list) > 1:
                for url_sec in urls_list:
                    if await Ut.verify_advertisement_url(url=url_sec):
                        if url_sec not in adverts_urls:
                            if "?" in url_sec:
                                url_sec = url_sec[:url_sec.rfind("?")]

                            adv_name, adv_category, adv_location = await Ut.parse_advertisement(url=url_sec)
                            if adv_name is None:
                                text = [
                                    f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ {url_sec}\n",
                                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ!",
                                    "\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                                ]
                                msg = await message.answer(text="\n".join(text), disable_web_page_preview=True)
                                await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)
                                continue

                            adverts_urls.append({
                                "url": url_sec, "title": adv_name, "category": adv_category, "location": adv_location
                            })

                    else:
                        if url_sec not in wrong_urls:
                            wrong_urls.append(url_sec)

            else:
                if await Ut.verify_advertisement_url(url=input_url):
                    if input_url not in adverts_urls:
                        if "?" in input_url:
                            input_url = input_url[:input_url.rfind("?")]

                        adv_name, adv_category, adv_location = await Ut.parse_advertisement(url=input_url)
                        if adv_name is None:
                            text = [
                                f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ {input_url}\n",
                                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ!",
                                "\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                            ]
                            msg = await message.answer(text="\n".join(text), disable_web_page_preview=True)
                            await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)
                            return

                        adverts_urls.append({
                            "url": input_url, "title": adv_name, "category": adv_category, "location": adv_location
                        })
                        adverts_urls.append(input_url.strip())

                else:
                    if input_url not in wrong_urls:
                        wrong_urls.append(input_url)

        await state.update_data(adverts_urls=adverts_urls)

    else:
        return

    data = await state.get_data()
    price = (data["pf"] * data["period"]) * len(adverts_urls)

    if adverts_urls:
        text = [
            "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞\n",
            f"üñä –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Å—Å—ã–ª–∫–∏:",
        ]

        for url in adverts_urls:
            text.append(f"{adverts_urls.index(url) + 1}. {url}")

        text.extend([
            "\nüí¥ –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–∞—á—É!"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–¥–∞—á–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É +7 (904) 084-44-92 (–ê–ª—å—Ñ–∞–±–∞–Ω–∫, –ê—Ä—Ç—ë–º –ö)",
            f"\n‚¨áÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—á–µ–Ω–æ"
        ])

        if wrong_urls:
            text_wrong_urls = [
                "üî¥ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!",
                "üí≠ –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ https://avito.ru/",
                "\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å 2 –∏ –±–æ–ª–µ–µ —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Ctrl + Enter) –∏–ª–∏ –ø—Ä–æ–±–µ–ª (Space)\n"
            ]
            text.insert(2, "\n".join(text_wrong_urls))

    else:
        text = [
            "üî¥ –°—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!\n",
            "üí≠ –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ https://avito.ru/",
            "\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å 2 –∏ –±–æ–ª–µ–µ —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Ctrl + Enter) –∏–ª–∏ –ø—Ä–æ–±–µ–ª (Space)"
        ]
        msg = await message.answer(text="\n".join(text), disable_web_page_preview=True)
        return await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

    markup = await Im.payment()
    await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)

    await state.update_data(price=price)
    await state.set_state(CreateOrder.MakePayment)


@router.callback_query(CreateOrder.MakePayment)
async def payment_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    logger.info(f"Handler called. {payment_confirmation.__name__}. user_id={uid}")

    cd = callback.data
    if cd == "back":
        return await write_advert_url(message=callback, state=state, from_back_btn=True)

    elif cd == "payment_completed":
        data = await state.get_data()

        payment_data = {"data": data["adverts_urls"]}
        payment = await DbPayment(tg_user_id=uid, confirmation=0, data=json.dumps(payment_data)).add()
        if payment:
            text = [
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n",
                "‚ÑπÔ∏è –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –æ–ø–ª–∞—Ç—É, –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–∞–±–æ—Ç—É!",
                "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
            ]
            markup = await Im.order_created()
            await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)
            await state.clear()

            await Ut.send_payment_confirmation_to_admins(payment=payment, price=data["price"])

        else:
            text = [
                "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
            ]
            msg = await callback.message.answer(text="\n".join(text), disable_web_page_preview=True)
            await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)

# @router.callback_query(CreateOrder.MakePayment)
# async def create_process_has_completed(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer()
#     uid = callback.from_user.id
#     logger.info(f"Handler called. {create_process_has_completed.__name__}. user_id={uid}")
#
#     cd = callback.data
#     if cd == "back":
#         return await write_advert_url(message=callback, state=state, from_back_btn=True)
#
#     elif cd == "payment_completed":
#         text = [
#             "–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑..."
#         ]
#         await Ut.send_step_message(user_id=uid, text="\n".join(text))
#
#         db_user = await DbUser(tg_user_id=uid).select()
#         if not db_user:
#             await DbUser(tg_user_id=uid, balance=0).add()
#             api_user = APIUser(telegram=uid, balance=0, name="tguser", email="tg.user@gmail.com")
#             result = await APIInterface.add_or_update_new_user(api_user=api_user)
#             if result["success"] is False:
#                 logger.error("Failed to add/update new user in API!")
#
#                 text = [
#                     "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É!",
#                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
#                 ]
#                 markup = await Im.back(callback_data="back_from_order")
#                 await Ut.send_step_message(user_id=uid, text="\n".join(text), markup=markup)
#
#                 return await state.clear()
#
#         data = await state.get_data()
#         period = data["period"]
#         pf = data["pf"]
#         adverts_urls = data["adverts_urls"]
#
#         successful_created = 0
#         for adv_url in adverts_urls:
#             adv_name, adv_category, adv_location = await Ut.parse_advertisement(url=adv_url)
#             if adv_name is None:
#                 text = [
#                     f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ {adv_url}\n",
#                     "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ!",
#                     "\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
#                 ]
#                 msg = await callback.message.answer(text="\n".join(text), disable_web_page_preview=True)
#                 await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)
#                 continue
#
            # api_order = APIOrder(
            #     telegram=uid, link=adv_url, title=adv_name, spend=pf * period, limit=pf, category=adv_category,
            #     location=adv_location)
#             result = await APIInterface.add_or_update_new_task(api_order=api_order)
#             if result["success"] is False:
#                 logger.error("Failed to add/update task in API!")
#
#                 text = [
#                     f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ {adv_url}\n",
#                     "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º",
#                     "\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
#                 ]
#
#             else:
#                 api_id = -1
#                 for task in result["data"]["tasks"]:
#                     if task["link"] == adv_url:
#                         api_id = int(task["id"])
#                         break
#
#                 await DbOrder(tg_user_id=uid, api_id=api_id, status=0, period=data["period"], pf=data["pf"],
#                               advert_url=adv_url).add()
#                 successful_created += 1
#                 text = [
#                     "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n",
#                     f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {adv_url}\n",
#                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {data['period']}",
#                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§: {data['pf']}"
#                 ]
#
#             msg = await callback.message.answer(text="\n".join(text), disable_web_page_preview=True)
#             await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)
#
#         if successful_created == len(adverts_urls):
#             text = [
#                 "‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!\n",
#                 "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n",
#                 "‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –±—É–¥—É—Ç –Ω–∞—á–∞—Ç—ã –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
#                 "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
#             ]
#
#         elif successful_created and successful_created < len(adverts_urls):
#             text = [
#                 "‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n",
#                 "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å!",
#                 "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n",
#                 "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n",
#                 "‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –±—É–¥—É—Ç –Ω–∞—á–∞—Ç—ã –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
#                 "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
#             ]
#
#         elif not successful_created:
#             text = [
#                 "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!",
#                 "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
#                 "\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ"
#             ]
#
#         markup = await Im.order_created()
#         msg = await callback.message.answer(text="\n".join(text), reply_markup=markup)
#         await Ut.add_msg_to_delete(user_id=uid, msg_id=msg.message_id)
#
#         await state.clear()
