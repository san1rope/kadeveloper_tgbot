import json
import logging

from aiogram import Router, types
from aiogram.exceptions import TelegramBadRequest

from config import Config
from tg_bot.db_models.quick_commands import DbPayment
from tg_bot.db_models.schemas import Payment
from tg_bot.keyboards.inline import PaymentConfirmation

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(PaymentConfirmation.filter())
async def confirm_payment(callback: types.CallbackQuery, callback_data: PaymentConfirmation):
    await callback.answer()
    uid = callback.from_user.id
    logger.info(f"Handler called. {confirm_payment.__name__}. user_id={uid}")

    payment: Payment = await DbPayment(db_id=callback_data.payment_id).select()
    if callback_data.confirm:
        text = [
            "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑..."
        ]
        await DbPayment(db_id=payment.id).update(confirmation=1)

        text_for_user = [
            "‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –í–∞—à –ø–ª–∞—Ç–µ–∂!\n",
            "–í–æ –≤–∫–ª–∞–¥–∫–µ - '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã' –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!"
        ]

        await callback.message.edit_text(text="–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...")

        order_data = json.loads(payment.data)

    else:
        text = [
            "üîò –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–ª–∞—Ç–µ–∂!"
        ]
        await DbPayment(db_id=payment.id).update(confirmation=2)

        text_for_user = [
            "üî¥ –ê–¥–º–∏–Ω —É–∫–∞–∑–∞–ª, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –±—ã–ª–æ!\n",
            "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω."
        ]

    await callback.message.edit_text(text="\n".join(text))

    try:
        await Config.BOT.send_message(chat_id=payment.tg_user_id, text="\n".join(text_for_user))

    except TelegramBadRequest:
        pass
